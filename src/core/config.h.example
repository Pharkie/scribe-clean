/**
 * @file config.h.example.example
 * @brief Configuration settings template for Scribe ESP32-C3 Thermal Printer
 * @author Adam Knowles
 * @date 2025
 * @copyright Copyright (c) 2025 Adam Knowles. All rights reserved.
 * @license Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
 *
 * This file is part of the Scribe ESP32-C3 Thermal Printer project.
 *
 * This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0
 * International License. To view a copy of this license, visit
 * http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Commercial use is prohibited without explicit written permission from the author.
 * For commercial licensing inquiries, please contact Adam Knowles.
 *
 * Based on the original Project Scribe by UrbanCircles.
 * 
 * INSTRUCTIONS: Copy this file to config.h and fill in your actual credentials.
 * The config.h file is gitignored to keep your secrets safe.
 */

#ifndef CONFIG_H
#define CONFIG_H

#include <ArduinoLog.h>
#include <esp_log.h>

// ============================================================================
// RUNTIME DEFAULTS - Can be overridden by config.json
// ============================================================================
// WARNING: These are INITIAL DEFAULTS ONLY used to populate config.json on first setup
// In production, ALL these values will be OVERRIDDEN by config.json
// Users can modify these via the settings web interface

// Default WiFi settings
static const char *defaultWifiSSID = "YOUR_WIFI_SSID";
static const char *defaultWifiPassword = "YOUR_WIFI_PASSWORD";

// Default device identity
static const char *defaultDeviceOwner = "YOUR_DEVICE_NAME";
static const char *defaultTimezone = "Europe/London";

// Default MQTT broker settings
static const char *defaultMqttServer = "YOUR_MQTT_SERVER.hivemq.cloud";
static const int defaultMqttPort = 8883; // TLS port
static const char *defaultMqttUsername = "YOUR_MQTT_USERNAME";
static const char *defaultMqttPassword = "YOUR_MQTT_PASSWORD";

// Unbidden Ink (Pipedream) API configuration
static const bool defaultEnableUnbiddenInk = false; // Enable/disable Unbidden Ink feature
static const char *defaultChatgptApiToken = "YOUR_OPENAI_API_KEY"; // Default ChatGPT API token
static const int defaultUnbiddenInkStartHour = 10;                                                 // Working hours start (24-hour format)
static const int defaultUnbiddenInkEndHour = 16;                                                   // Working hours end (24-hour format)
static const int defaultUnbiddenInkFrequencyMinutes = 60;                                          // Send 1 message in every X minute window

// Default button configuration (GPIO pins, actions, and MQTT topics together)
struct ButtonConfig
{
    int gpio;
    const char *shortAction;
    const char *shortMqttTopic;
    const char *longAction;
    const char *longMqttTopic;
};

// Note GPIO are fixed in config.h, but endpoints can be changed in config.json
// Empty MQTT topic means use local printing (/print-local equivalent)
static const ButtonConfig defaultButtons[] = {
    {5, "/api/joke", "", "/api/print-test", ""}, // Button 1: GPIO 5 - local printing for both actions
    {6, "/api/riddle", "", "", ""},              // Button 2: GPIO 6 - local printing for short action, no long action
    {7, "/api/quote", "", "", ""},               // Button 3: GPIO 7 - local printing for short action, no long action
    {8, "/api/quiz", "", "", ""}                 // Button 4: GPIO 8 - local printing for short action, no long action
};

// Hardware button settings
static const int numHardwareButtons = sizeof(defaultButtons) / sizeof(defaultButtons[0]); // Automatically calculated
static const unsigned long buttonDebounceMs = 50;                                         // Debounce time in milliseconds
static const unsigned long buttonLongPressMs = 2000;                                      // Long press threshold in milliseconds
static const bool buttonActiveLow = true;                                                 // true = button pulls to ground, false = button pulls to VCC

// Button rate limiting (separate from debouncing)
static const unsigned long buttonMinInterval = 3000;      // 3 seconds minimum between button presses
static const unsigned long buttonMaxPerMinute = 20;       // 20 button presses per minute max
static const unsigned long buttonRateLimitWindow = 60000; // 1 minute rate limit window

// ============================================================================
// BACKEND CONSTANTS - Fixed at compile time, not user-configurable
// ============================================================================

// Network & Time Configuration
static const char *ntpServers[] = {
    "time.cloudflare.com", // Fastest - Cloudflare's global CDN
    "time.google.com",     // Very fast - Google's infrastructure
    "0.pool.ntp.org",      // Traditional reliable pool
    "1.pool.ntp.org"       // Backup pool server
};
static const int ntpServerCount = sizeof(ntpServers) / sizeof(ntpServers[0]);
static const int ntpSyncTimeoutSeconds = 30;    // Maximum wait time for initial NTP sync
static const int ntpSyncIntervalSeconds = 3600; // Re-sync interval (1 hour)

// Logging Configuration
static const int logLevel = LOG_LEVEL_NOTICE;
static const esp_log_level_t espLogLevel = ESP_LOG_WARN;
static const bool enableSerialLogging = true;       // Serial console
static const bool enableFileLogging = false;        // LittleFS file (untested)
static const bool enableMQTTLogging = false;        // MQTT topic
static const bool enableBetterStackLogging = false; // BetterStack (slow but useful for debugging)
static const char *mqttLogTopic = "scribe/log";
static const char *logFileName = "/logs/scribe.log";
static const size_t maxLogFileSize = 100000; // 100KB

// External API endpoints
static const char *jokeAPI = "https://icanhazdadjoke.com/";
static const char *quoteAPI = "https://zenquotes.io/api/random";
static const char *triviaAPI = "https://the-trivia-api.com/api/questions?categories=general_knowledge&difficulty=medium&limit=1";
static const char *chatgptApiEndpoint = "https://api.openai.com/v1/chat/completions"; // ChatGPT API URL (NEVER exposed to frontend)

// BetterStack configuration
static const char *betterStackToken = "YOUR_BETTERSTACK_TOKEN";
static const char *betterStackEndpoint = "YOUR_BETTERSTACK_ENDPOINT";

// Application Settings
static const int maxCharacters = 1000;      // Max characters per message (single source of truth)
static const int maxPromptCharacters = 500; // Max characters for Unbidden Ink prompts
static const int totalRiddles = 545;        // Total riddles in riddles.ndjson
static const char *apiUserAgent = "Scribe Thermal Printer (https://github.com/Pharkie/scribe)";

// Hardware Configuration
static const int TX_PIN = 21;           // TX pin to printer RX (green wire)
static const int heatingDots = 10;      // Heating dots (7-15, lower = less power)
static const int heatingTime = 150;     // Heating time (80-200ms)
static const int heatingInterval = 250; // Heating interval (200-250ms)

// System Performance Settings
static const unsigned long memCheckInterval = 60000;     // 60 seconds (memory check frequency)
static const unsigned long reconnectInterval = 5000;     // 5 seconds (WiFi reconnection interval)
static const unsigned long wifiConnectTimeoutMs = 15000; // 15 seconds timeout for WiFi connection
static const char *fallbackAPSSID = "Scribe-setup";
static const char *fallbackAPPassword = "scribe123";
static const int statusLEDPin = 8;    // GPIO8 for status LED (ESP32-C3 has built-in LED on GPIO8)
static const int webServerPort = 80;  // HTTP port for web server
const int watchdogTimeoutSeconds = 8; // Watchdog timeout in seconds

// Printer Discovery Heartbeat
static const unsigned long printerDiscoveryHeartbeatInterval = 60000; // 1 minute heartbeat interval

// Input Validation Limits
static const unsigned long minRequestInterval = 100;  // 100ms minimum between requests
static const unsigned long maxRequestsPerMinute = 60; // 60 requests per minute
static const unsigned long rateLimitWindowMs = 60000; // 1 minute rate limit window
static const int maxControlCharPercent = 10;          // Max control characters as percentage of message length
static const int maxJsonPayloadSize = 8192;           // 8KB max JSON payload size
static const int maxMqttTopicLength = 128;            // Max MQTT topic length
static const int maxParameterLength = 1000;           // Default max parameter length
static const int maxRemoteParameterLength = 100;      // Max length for remote parameter
static const int maxUriDisplayLength = 200;           // Max URI length for display (truncated after this)
static const int jsonDocumentSize = 1024;             // Standard JSON document buffer size
static const int largeJsonDocumentSize = 2048;        // Large JSON document buffer size
static const int maxValidationErrors = 10;            // Max validation errors to store
static const int maxOtherPrinters = 10;               // Max other printers to track
static const int stringBufferSize = 64;               // Standard string buffer size
static const int topicBufferSize = 64;                // MQTT topic buffer size
static const int maxWifiPasswordLength = 64;          // Max WiFi password length
static const int maxTimezoneLength = 64;              // Max timezone string length
static const int minJokeLength = 10;                  // Minimum joke length to be considered valid

// ============================================================================
// LED STRIP CONFIGURATION - Optional FastLED support
// ============================================================================
// Uncomment the following line to enable LED strip support (requires FastLED library)
// #define ENABLE_LEDS

#ifdef ENABLE_LEDS
// LED Hardware Configuration
static const int LED_PIN = 4;                         // GPIO pin for LED strip data (avoid pins used for other functions)
static const int LED_COUNT = 30;                      // Number of LEDs in the strip
// Note: LED_TYPE and COLOR_ORDER are defined in LedEffects.cpp using FastLED constants

// LED Performance Configuration  
static const int LED_BRIGHTNESS = 64;                 // Default brightness (0-255, 64 = 25% to save power)
static const int LED_REFRESH_RATE = 60;               // Refresh rate in Hz (60Hz is smooth for most effects)
static const unsigned long LED_UPDATE_INTERVAL = 1000 / LED_REFRESH_RATE; // Update interval in milliseconds

// LED Effect Configuration
static const int LED_EFFECT_FADE_SPEED = 5;           // Fade speed for transitions (1-255)
static const int LED_TWINKLE_DENSITY = 8;             // Number of twinkle stars simultaneously
static const int LED_CHASE_SPEED = 3;                 // Chase effect speed (pixels per update)
static const int LED_MATRIX_DROPS = 5;                // Number of matrix drops simultaneously
#endif // ENABLE_LEDS

#endif
